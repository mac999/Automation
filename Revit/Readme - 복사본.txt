1. IDE(통합 개발 환경) 설치
   
   압축파일에 첨부된 Automation관련 프로젝트 소스를 빌드하여 컴포넌트를 생성하려면 그 전에 소스를
   컴파일하고 참조하는 라이브러리와 링크하는 기능을 일괄적으로 제공해 주는 통합개발환경(IDE)를
   설치해야 한다.

   여기서 사용하는 무료 도구는 Visual Studio Express 2010 버전이다. 책에 링크가 있으나 사실 
   마이크로소프트에서 이 링크를 수시로 변경하기 때문에 Google에서 직접 검색해 다운로드 받는
   것이 더 편할 수 있다.
   '3. IDE'폴더에 해당 IDE도구를 다운로드 받을 수 있는 링크를 첨부하였으니 참고하길 바라며, 
   이 주소는 마이크로소프트사의 정책에 따라 또 변경될 수 있음을 참고하라.


2. Addin 파일과 Automation 예제 실행에 대해서.

   이 압축파일에 포함된 모든 예제들은 BIMPlatform압축파일을 C:\에 압축을 풀어야 제대로 실행된다.
   이는 .Addin과 같은 실행파일이나 DLL경로가 포함된 XML파일에 이렇게 경로가 지정되어 있기 때문이다.
   Revit의 경우 이 Addin XML파일을 통해 컴포넌트의 실행위치를 인식한다. 아래는 Revit .Addin 파일의 예이다.
   <Assembly> 태그내에 컴포넌트파일의 경로가 표시되어 있다.(우리가 만드는 Addin DLL파일도 컴포넌트
   의 일종이다. Revit도 내부적으로는 이렇게 컴포넌트가 레고블럭처럼 쌓여져 전체 시스템을 구성한다.) 

   <FullClassName>은 명령을 처리할 클래스의 namespace와 class 명을 namespace.class 로 알려준 것으로 
   이렇게 해야 Revit이 해당 클래스를 찾아 Execute() 함수를 실행할 수 있다.
   이런식으로 Revit에 Addin 컴포넌트가 실행되기 위한 관련 모든 정보를 모두 알려줘야 함에 주의해야 한다.

   <?xml version="1.0" encoding="utf-8" standalone="no"?>
   <RevitAddIns>
   <AddIn Type="Command">
      <Assembly> C:\BIMPlatform\6. Automation\5. Revit\1. Addin\HelloWorld\HelloWorld\bin\Release\HelloWorld.dll</Assembly>
      <AddInId>239BD853-36E4-461f-9171-C5ACEDA4E721</AddInId>
      <FullClassName>HelloWorld.HelloWorld</FullClassName>
      <Text>HelloWorld</Text>
      <VendorId>ADSK</VendorId>
      <VendorDescription>Autodesk, www.autodesk.com</VendorDescription>
   </AddIn>
   </RevitAddIns>


   또한, 책에서 언급된 Visual Studio 개발 도구 버전과 모델러 버전을 사용해야 큰 문제가 없이 실행된다.

   만약 모델러 버전 등이 달라질 경우에는 그에 맞게 컴포넌트를 개발하기 위한 프로젝트 파일의 정보 및
   참조되는 컴포넌트 경로와 버전을 다시 수정해줘야 한다. 그렇지 않으면 호환성이 없어 모델러가 
   우리가 개발한 컴포넌트를 제대로 인식하지 못한다.



3. 컴포넌트 실행 환경에 관한 문제

   API를 사용한 자동화 개발시 아래와 같은 문제가 발생할 수 있다.

1) 모델러 프로그램 사용 버전이나 환경에 따라 호환성 문제로 에러가 발생하는 경우가 있다.
   이런 경우에 해당 벤더사 개발자 사이트에서 최신 SDK라이브러리를 다운받아 적용하고, 라이브러리와 같은 
   프로젝트 설정도 해당 버전에 맞게 재 수정해야 한다.
   가능한 책에서 언급한 모델러 버전과 개발도구 버전 및 종류를 사용하면 이런 문제가 생기지 않으나 그렇지 
   못할 경우에는 모델러에서 제공하는 적절한 버전의 컴포넌트 DLL이나 프로젝트 소스내 포함되 지정되어 있는 
   컴포넌트 DLL의 버전 등을 사용하는 컴포넌트 버전으로 수정해야 문제없이 실행된다.
   
2) 하위 폴더에 포함된 특정 프로젝트 파일(특히, Revit이나 Civil3D)에서 빌드되는 DLL파일의 경우, 
   설정파일(addin파일) 내 경로가 고정되어 있다. 
   현재는 c:\BIMPlatform\... 으로 설정되어 있으므로, 다른 폴더에 압축을 풀었을 경우 제대로 addin이 로딩되지 않는다. 
   이럴 경우 경로를 수정하거나, c:\ 에 압축을 풀어서 실행하면 된다.

3) 만약 프로젝트 빌드 중 참조된 라이브러리를 발견하지 못하겠다는 에러가 발생되면, 책을 참고하여 해당 라이브러리 
   컴포넌트를 추가하고 빌드하길 바란다. 
   가끔 Revit이나 Civil3D를 다른 폴더에 설치하거나, 이 책에서 언급한 버전 이외의 다른 버전을 사용할 경우 
   이런 문제가 발생한다.



4. 컴포넌트 참조 및 버전 호환성에 관한 문제

   .NET 컴포넌트를 사용하는 프로젝트의 경우에는 가끔 본 압축파일내 포함된 원래 프로젝트 파일을 Visual Studio 로 로드
   해 빌드하고 모델러에서 빌드된 DLL을 로드하려 할 때 제대로 로딩되지 않는 경우가 있다.(즉, 모델러가 우리가 만든 Addin
   DLL 파일을 인식하지 못하는 경우가 있다.) 이는 본 프로젝트 DLL 컴포넌트가 사용하는 모델러의 DLL컴포넌트와 실제 독자
   PC에 설치된 모델러가 제공하는 DLL컴포넌트 버전이 서로 불일치하여 발생되는 문제인 경우가 많다.
   이런 경우 책에서 처럼 모델러가 제공하는 DLL 컴포넌트 파일을 다시 추가한다. 아래처럼 시도 해 본다.

1) Visual Studio에서 로딩된 프로젝트의 Solution Explorer 탭의 프로젝트 트리에서  
   참조(References)되고 있는 모델러의 DLL컴포넌트를 마우스로 선택한다.
   예) AecBaseMgd, AecDbMgd, AcCoreMgd, AcDbMgd, AcMgd 등 
2) 선택된 DLL컴포넌트를 모두 지운다.
   (DEL 키 이용해 삭제. 실제 DLL파일이 지워지는 것이 아닌 참조 정보만 삭제되니 걱정할 필요는 없다.)
3) 다시 참조해야 할 모델러의 DLL컴포넌트를 추가한다. 책에서 처럼 참조(References)노드에서 컨텍스트 메뉴(마우스 우클릭)
   를 호출해 '참조 추가(Add Reference...)'를 클릭하여 나타나는 다이얼로그의 'Browse'탭을 선택해 
   해당 모델러의 DLL 컴포넌트를 선택하여 추가한다.
4) 혹시 이렇게 해도 안될 경우 책에서 말하는 데로 하나씩 따라 프로젝트를 생성해 보고, 소스만 본 압축파일에서 제공하는
   소스로 대치하여 빌드 한 후 실행해 본다.


4. DBMS등 타 시스템과 연동 및 상호운용에 관한 문제

   참고로 Oracle, MS-SQL, MySQL과 같은 데이터베이스(Database) 시스템이나 파일(File), 심지어 iPhone, iPad등과 
   네트워크(Tcp/ip 등)이나 웹서비스(SOAP)을 이용해 연동을 하고자 한다면, 해당 프로그램과 SDK를 다운받고 설치한 후 
   제공하는 examples 을 분석해 해당 API를 사용해야 한다. 물론 해당 API를 사용하기 위해서 프로젝트에서 라이브러리 
   참조에 해당 API가 구현되어 있는 라이브러리를 추가해 줘야 한다. 실제 google에서 몇몇 키워드를 넣고 찾아보면 이렇게 
   연동(linkage)하여 사용하는 예나 오픈 소스(Open source)가 많이 있다. 
   만약 각 회사별 기간시스템(예 - ERP)등과 연동해 필요한 정보를 가져오거나 BIM 모델러로 부터 정보를 보낼려면, 
   기간시스템에 필요한 웹서비스나 공개 API(OpenAPI)가 제공되어야 한다. 참고로 많은 인터넷 기반 시스템
   (예 - Facebook, Google 등)이 Open API를 제공하고 있다.

   이런 작업을 하고자 한다면, 해당 주제에 대한 제일 쉬워보이는 입문서의 예제를 분석하거나, 벤더사 등이 제공하는 
   튜토리얼을 따라해 보는 것만으로도 어느 정도 성과를 얻을 수 있다. 최근에는 YouTube에서 관련 무료 강좌들이 많이 
   나와 있으므로 이를 참고하는 것도 좋은 방법이다.

   www.devpia.com 과 같은 개발자 사이트를 활용하여, 궁금한 부분은 질문하고 답변을 받거나 관련 답변을 검색할 수 
   있으며, Google code와 같은 곳에서도 많은 정보를 얻을 수 있다.


*참고: 컴포넌트와 라이브러리 개념 구분에 대해.
   오토메이션 컴포넌트 개발에 사용되는 라이브러리란 용어는 모델러에서 말하는 라이브러리와는 개념상 유사하나
   대상이 다르다. 모델러의 라이브러리는 GDL이나 패밀리 같은 것이 그 대상이나 오토메이션에서 라이브러리는 
   사용할 컴포넌트(예 - DLL파일 등)에 대한 참조 정보를 가지고 있는 것을 라이브러리라 한다. 즉, 재활용하기 
   위한 정보가 포함되어 있다는 면에서는 같으나, 적용 대상이 다르다. 


  BIM에서 상호운용성 기술 중에 모델러나 시스템이 제공하는 컴포넌트를 이용한 Automation 기술은 필수적으로 채택되고 
  있으며, 컴포넌트가 제공하는 기능을 이용해 로직을 만들어 나가는 스크립트 기술은 알고리즘 기반 건축 디자인이나 
  미디어 아트 등 다른 분야에서도 필수적으로 활용되고 있으므로 최소한 스크립트 언어 하나 정도는 익힐 필요가 있을 듯 하다.
  현재는 스크립트는 모델링을 구현하는 DNA이며, DNA를 통해 만들어진 구조가 시스템의 기능을 구현하는 세상이다. 
  

- BIM 상호운용성과 플랫폼, 도서출판 씨아이알, 2013.
